Priority Queue is an extension of queue with following properties.
	- Every item has a priority associated with it.
	- An element with high priority is dequeued before an element with low priority.
	- If two elements have the same priority, they are served according to their order in the queue.


A typical priority queue supports following operations.
	- insert(item, priority): Inserts an item with given priority.
	- getHighestPriority(): Returns the highest priority item.
	- deleteHighestPriority(): Removes the highest priority item.



How to implement priority queue?
- A simple implementation is to use array of a custom object which has 2 fields value, priority
	- insert() can be implemented by adding an item at end of array in O(1) time.
	- getHighestPriority() can be implemented by linearly searching the highest priority item in array in O(n) time.
	- deleteHighestPriority() can be implemented by first linearly searching an item, then removing the item by moving all subsequent items one position back.

- We can also use Linked List.
	- time complexity of all operations with linked list remains same as array. 
	- but the advantage with linked list is deleteHighestPriority() can be more efficient as we donâ€™t have to move items.

- Heap (binary heap) is generally preferred for priority queue implementation because heaps provide better performance compared arrays or linked list.
	- insert() can be implemented in O(Logn) time
	- getHighestPriority() can be implemented in O(1) time
	- deleteHighestPriority() can be implemented in O(Logn) time

- With Fibonacci heap
	- insert() and getHighestPriority() can be implemented in O(1) amortized time
	- deleteHighestPriority() can be implemented in O(Logn) amortized time.

